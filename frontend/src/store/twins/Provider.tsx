import { City } from '../city';
import React, { createContext, useReducer } from "react";

// TODO: replace with auto-gen interface from backend protobuffers
interface Twin {
    id: string; // UUID generated by server
    name: string;
    city: City;
}

interface TwinState {
    current?: Twin;
    twins: Twin[];
};

interface SwitchTwinAction {
    type: 'switch_twin';
    twin: Twin;
};

interface LoadTwinsAction {
    type: 'load_twins';
    twins: Twin[];
}

type TwinAction = SwitchTwinAction | LoadTwinsAction;

function reducer(state: TwinState, action: TwinAction): TwinState {
    switch (action.type) {
        case 'switch_twin': {
            return {
                ...state,
                current: action.twin
            };
        }
        case 'load_twins': {
            return {
                ...state,
                twins: action.twins
            };
        }
        default: {
            return {
                ...state
            };
        }
    }
}

const initialState: TwinState = {
    twins: [
        { id: 'a68b1cdd-ee5e-4569-8ce2-4d7c2c54c690', name: 'Antwerp Twin', city: { name: 'Antwerp', longitude: 4.402771, latitde: 51.260197 } },
        { id: '4d30cf48-3790-4c22-b9f8-2825245924f0', name: 'Brussels Twin', city: { name: 'Brussels', longitude: 4.34878, latitde: 50.85045 } }
    ]
}

const TwinContext = createContext<[TwinState, React.Dispatch<TwinAction>]>([initialState, () => { }]);

function TwinProvider({ children }: { children: React.ReactNode }) {
    const [state, dispatch] = useReducer(reducer, initialState);

    return (
        <TwinContext.Provider value={[state, dispatch]}>
            {children}
        </TwinContext.Provider>
    );
}

export { type Twin, TwinProvider, TwinContext };

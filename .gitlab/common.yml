# Macro like object that can be inserted in any location.
# Login to the private GitLab container registry.
.docker-login: &docker-login
  before_script:
    # Login to the private gitlab container registry using CI/CD variables
    # provided by gitlab.
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY

# Macro like object that can be inserted in any location.
# Use the `build-env` image as a base image.
.build-env-image:
  image:
    name: $BUILD_ENV_IMAGE_TAG
    # Only pull the image from the registry if it is not available locally.
    # Because the image is built in a previous stage, it should always be
    # available.
    pull_policy: if-not-present
  before_script:
    # Copy the build phase environment variables.
    - cp docker/.env.build .env

build-env:
  # Run the job under the `prepare` stage.
  stage: prepare
  # Add the `shell-exec` tag to run this job directly on the server.
  tags: [shell-exec]
  # Allows the job to be interrupted when already started.
  interruptible: true
  # Run these commands before running the actual script. If other jobs also
  # include a `before_script`, then gitlab ci will ensure that they are run on
  # the same runner. This command should then be extracted to a `default` job
  # at the top of the file to ensure this command is ran first.
  before_script:
    # Login to the private gitlab container registry using CI/CD variables
    # provided by gitlab.
    - !reference [.docker-login, before_script]
  script:
    # Build the image locally and push to the GitLab private repository
    - >
      docker build
      --cache-from $BUILD_ENV_BASE_IMAGE_TAG
      --cache-from $BUILD_ENV_IMAGE_TAG
      --tag $BUILD_ENV_IMAGE_TAG
      --file ./Dockerfile
      --target build-env
      .
    - docker push $BUILD_ENV_IMAGE_TAG

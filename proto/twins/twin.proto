syntax = "proto3";

import "google/protobuf/struct.proto";
import "google/protobuf/empty.proto";
package twin;

// The service definition.
service TwinService {
    rpc createTwin (createTwinRequest) returns (createTwinResponse);
    rpc getAllTwins (getAllTwinsRequest) returns (getAllTwinsResponse);
    rpc getBuildings (getBuildingsRequest) returns (getBuildingsResponse);
    rpc deleteBuilding (deleteBuildingRequest) returns (google.protobuf.Empty);
    rpc deleteTwin (deleteTwinRequest) returns (google.protobuf.Empty);
    rpc undoDeleteBuilding (undoDeleteBuildingRequest) returns (google.protobuf.Empty);
    rpc createPreset (createPresetRequest) returns (createPresetResponse);
    rpc getAllPreset (google.protobuf.Empty) returns (getAllPresetResponse);
}

//creating twin
message createTwinRequest {
    string name = 1;
    double latitude = 2;
    double longitude = 3;
    double radius = 4;
}
message createTwinResponse {
    //the ID is defined by the database (SERIAL type)
    int32 id = 1;
    //unix timestamp
    int32 creation_date_time = 2;
}

//get all twins
message twinObject {
    //the ID is defined by the database (SERIAL type)
    int32 id = 1;
    string name = 2;
    double latitude = 3;
    double longitude = 4;
    //radius in meters
    double radius = 5;
    //unix timestamp
    int32 creation_date_time = 6;
    int64 simulation_amount = 7;
}
message getAllTwinsRequest {}
message getAllTwinsResponse {
    repeated twinObject twins = 1;
}

//get buildings for specific twin
message buildingObject {
    //the ID is defined by the database (SERIAL type)
    int32 id = 1;
    string street = 2;
    string house_number = 3;
    string postcode = 4;
    string city = 5;
    google.protobuf.Value coordinates = 6;
    bool visible = 7;
}

message getBuildingsRequest {
    //the ID is defined by the database (SERIAL type)
    int32 id = 1;
}
message getBuildingsResponse {
    repeated buildingObject buildings = 1;
}

//delete a building
message deleteBuildingRequest {
    //the ID is defined by the database (SERIAL type)
    int64 id = 1;
}

//delete a twin
message deleteTwinRequest {
    //the ID is defined by the database (SERIAL type)
    int32 id = 1;
}

//restore a deleted building
message undoDeleteBuildingRequest {
    //the ID is defined by the database (SERIAL type)
    int64 id = 1;
}

message getAllPresetRequest {}

message getAllPresetResponse {
    repeated presetObject preset = 1;
}

message presetObject {
    string name = 1;
    string info = 2;
}

message createPresetRequest {
    string name = 1;
    string info = 2;
}

message createPresetResponse {
    int32 id = 1;
}

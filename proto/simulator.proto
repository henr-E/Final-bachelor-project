syntax = "proto3";

package simulator;

// Communication between the manager and a simulator.
service Simulator {
  // Retrieves a specification of exactly which data is expected by the simulator and what data it will return.
  // Examples include: weather, power grid, ...
  rpc GetIOConfig (IOConfigRequest) returns (SimulatorIOConfig) {}

  // Set ups the simulator by providing it with the initial state of the city.
  rpc Setup (InitialState) returns (SetupResponse) {}

  // Executes one single time
  rpc DoTimestep (State) returns (TimestepResult) {}
}

// Defines the inputs and outputs for a simulator.
message SimulatorIOConfig {
  // Defines which kinds of data (weather, power grid, ...) the simulator will output back to the manager.
  repeated string output_kinds = 1;

  // Defines the required kinds of inputs that the simulation needs to be able to work.
  // For an electricity simulation this would be the power grid.
  repeated string required_input_kinds = 2;

  // Optional inputs that the simulator is able to use but are not required to be able to run the system.
  // For an electricity simulation an example of this would be weather data.
  repeated string optional_input_kinds = 3;
}

// Reserved message for the request dat in GetIOConfig.
message IOConfigRequest {}

// The initial data used to set up and start the simulation.
message InitialState {
  // The amount of milliseconds in each timestep.
  uint64 timestep_delta = 1;

  // The initial state of the city.
  State initial_state = 2;
}

// Reserved message for the response data to Setup.
message SetupResponse {}

// Data returned by the simulator after each timestep.
message TimestepResult {
  // The new state after executing the timestep.
  State output_state = 1;
}

// A state of the system, containing information about the data kinds specified in SimulatorIOConfig.
// The data contained in this also depends on whether this state is used as an input or output for a timestep.
message State {
  // For each kind of data, specify the actual data.
  // IE. maps 'energy' to an energy grid.
  map<string, Data> data_kinds = 1;
}

// Specific data relating to a kind of data.
message Data {
  // The actual data related to the DataKind.
  bytes data = 1;
}


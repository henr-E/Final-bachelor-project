syntax = "proto3";

package sensor.crud;

import "google/protobuf/empty.proto";
import "bigdecimal.proto";

service SensorCRUDService {
    // Get a list of supported quantities and units.
    rpc GetQuantitiesAndUnits(google.protobuf.Empty) returns (stream GetQuantitiesAndUnitsResponse);

    // Get a list of all existing sensors.
    rpc GetSensors(GetSensorsRequest) returns (stream GetSensorsResponse);

    // Create a sensor, pushing it to the database alongside its signals.
    rpc CreateSensor(CreateSensorRequest) returns (CreateSensorResponse);

    // Requests a sensor, containing all signals.
    rpc ReadSensor(ReadSensorRequest) returns (ReadSensorResponse);

    // Replaces the sensor with provided uuid with the provided sensor.
    // Similar to calling DeleteSensor -> CreateSensor, but keeps the provided.
    rpc UpdateSensor(UpdateSensorRequest) returns (UpdateSensorResponse);

    // Deletes the sensor with the provided uuid from the sensor-archive database.
    rpc DeleteSensor(DeleteSensorRequest) returns (DeleteSensorResponse);
}

enum CrudFailureReason {
    // The provided uuid has the incorrect format.
    UUID_FORMAT_ERROR = 0;
    // The provided uuid was not found in the sensors table.
    UUID_NOT_PRESENT_ERROR = 1;
    // The quantity of a signal in the provided sensor is invalid.
    INVALID_QUANTITY_ERROR = 2;
    // The unit of a signal in the provided sensor is invalid.
    INVALID_UNIT_ERROR = 3;
    // There was an issue inserting the data into the database.
    DATABASE_INSERTION_ERROR = 4;
    // There was a duplicate quantity in the same sensor
    DUPLICATE_QUANTITY_ERROR = 5;
}

message CrudFailure {
    repeated CrudFailureReason reasons = 1;
}


message Signal {
    // ID of the signal.
    int32 id = 1;
    // Alias of the signal as registered by the user.
    string alias = 2;
    // Quantity of the sensor
    string quantity = 3;
    // Default unit the quantity is measured in.
    string unit = 4;
    // Unit the sensor ingests data in.
    string ingestion_unit= 5;
    // Prefix of the values ingested by the sensor.
    bigdecimal.BigDecimal prefix = 6;
}

message Sensor {
    //the ID is defined by the database (SERIAL type)
    int32 twin_id = 1;
    // Uuid of the sensor.
    string id = 2;
    // Name of the sensor.
    string name = 3;
    // Description of the sensor.
    string description = 4;
    // Location of the sensor.
    double longitude = 5;
    // Location of the sensor.
    double latitude = 6;
    // List of signals the sensor is composed with.
    repeated Signal signals = 7;
    //can be null if it is a global sensor, or can be the actual building_id if it is a building sensor
    optional int32 building_id = 8;
}

message GetSensorsRequest {
    //the ID is defined by the database (SERIAL type)
    int32 twin_id = 1;
}

// Retrieving all sensors.
message GetSensorsResponse {
    Sensor sensor = 1;
}

// Creating a sensor.
message CreateSensorRequest {
    Sensor sensor = 1;
}
message CreateSensorResponse {
    oneof result {
        string uuid = 1;
        CrudFailure failures = 2;
    }
}

// Reading/getting a sensor.
message ReadSensorRequest {
    string uuid = 1;
}
message ReadSensorResponse {
  oneof result {
    Sensor sensor = 1;
    CrudFailure failures = 2;
  }
}

// Updating a sensor. the provided sensor will receive the provided uuid.
message UpdateSensorRequest {
    string uuid = 1;
    Sensor sensor = 2;
}
message UpdateSensorResponse {
    oneof result {
        bool success = 1;
        CrudFailure failures = 2;
    }
}

// Deleting a sensor.
message DeleteSensorRequest {
    string uuid = 1;
}
message DeleteSensorResponse {
    oneof result {
        bool success = 1;
        CrudFailure failures = 2;
    }
}

message SensorUpdateMessage {
    string sensor_id = 1;
    Sensor sensor = 2;
}

// Retrieving supported quantities and units.
message GetQuantitiesAndUnitsResponse {
    message Quantity {
        // Id of the quantity that should be used when identifying a quantity
        // to the server.
        string id = 1;
        // More presentable version of the quantity. Should NOT be used to
        // identify a quantity.
        string repr = 2;
    }

    message Unit {
        // Id of the unit that should be used when identifying a unit to the
        // server.
        string id = 1;
        // More presentable version of the unit. Should NOT be used to
        // identify a unit.
        string repr = 2;
    }

    // Quantity being supported
    Quantity quantity = 1;
    // List of supported units associated with the quantity.
    repeated Unit units = 2;
    // Id of the base unit associated with the quantity.
    string base_unit = 3;
}

syntax = "proto3";

package sensor.crud;

import "google/protobuf/empty.proto";

service SensorCRUDService {
    // Get a list of all existing sensors.
    rpc GetSensors(google.protobuf.Empty) returns (stream GetSensorsResponse);

    // Create a sensor, pushing it to the database alongside its signals.
    rpc CreateSensor(CreateSensorRequest) returns (CreateSensorResponse);

    // Requests a sensor, containing all signals.
    rpc ReadSensor(ReadSensorRequest) returns (ReadSensorResponse);

    // Replaces the sensor with provided uuid with the provided sensor.
    // Similar to calling DeleteSensor -> CreateSensor, but keeps the provided.
    rpc UpdateSensor(UpdateSensorRequest) returns (UpdateSensorResponse);

    // Deletes the sensor with the provided uuid from the sensor-archive database.
    rpc DeleteSensor(DeleteSensorRequest) returns (DeleteSensorResponse);
}

enum CrudFailureReason {
    // The provided uuid has the incorrect format.
    UUID_FORMAT_ERROR = 0;
    // The provided uuid was not found in the sensors table.
    UUID_NOT_PRESENT_ERROR = 1;
    // The quantity of a signal in the provided sensor is invalid.
    INVALID_QUANTITY_ERROR = 2;
    // The unit of a signal in the provided sensor is invalid.
    INVALID_UNIT_ERROR = 3;
    // There was an issue inserting the data into the database.
    DATABASE_INSERTION_ERROR = 4;
}

message BigInt {
    // Sign of the digit.
    bool sign = 1;
    // List of integers with the least significant integer first.
    repeated uint32 integer = 2;
    // Exponent of `10` (number = sign [integer_list] * 10^exponent)
    int64 exponent = 3;
}

message Signal {
    // Alias of the signal as registered by the user.
    string alias = 1;
    // Quantity of the sensor
    string quantity = 2;
    // Default unit the quantity is measured in.
    string unit = 3;
    // Unit the sensor ingests data in.
    string ingestion_unit= 4;
    // Prefix of the values ingested by the sensor.
    BigInt prefix = 5;
}

message Sensor {
    // Uuid of the sensor.
    string id = 1;
    // Name of the sensor.
    string name = 2;
    // Description of the sensor.
    string description = 3;
    // Location of the sensor.
    double longitude = 4;
    // Location of the sensor.
    double latitude = 5;
    // List of signals the sensor is composed with.
    repeated Signal signals = 6;
}

message GetSensorsResponse {
    Sensor sensor = 1;
}

message CrudFailure {
    repeated CrudFailureReason reasons = 1;
}

// Creating a sensor.
message CreateSensorRequest {
    Sensor sensor = 1;
}
message CreateSensorResponse {
    oneof result {
        string uuid = 1;
        CrudFailure failures = 2;
    }
}

// Reading/getting a sensor.
message ReadSensorRequest {
    string uuid = 1;
}
message ReadSensorResponse {
  oneof result {
    Sensor sensor = 1;
    CrudFailure failures = 2;
  }
}

// Updating a sensor. the provided sensor will receive the provided uuid.
message UpdateSensorRequest {
    string uuid = 1;
    Sensor sensor = 2;
}
message UpdateSensorResponse {
    oneof result {
        bool success = 1;
        CrudFailure failures = 2;
    }
}

// Deleting a sensor.
message DeleteSensorRequest {
    string uuid = 1;
}
message DeleteSensorResponse {
    oneof result {
        bool success = 1;
        CrudFailure failures = 2;
    }
}

message SensorUpdateMessage {
    string sensor_id = 1;
    Sensor sensor = 2;
}

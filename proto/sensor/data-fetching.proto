syntax = "proto3";

package sensor.data_fetching;

import "bigdecimal.proto";

import "google/protobuf/empty.proto";

// Service for fetching sensor data from the processed data.
service SensorDataFetchingService {
    // Fetch sensor data from all sensors.
    rpc FetchSensorDataAllSensors(AllSensorDataRequest) returns (AllSensorData);

    // Fetch sensor data from a single sensor.
    rpc FetchSensorDataSingleSensor(SingleSensorDataRequest) returns (SignalToValuesMap);

    // Fetch sensor data from all sensors in a stream. As new data comes in,
    // new data will be sent.
    rpc FetchSensorDataAllSensorsStream(stream AllSensorDataMessage) returns (stream AllSensorDataEntry);

    // Fetch sensor data from a single sensor in a stream. As new data comes
    // in, new data will be sent.
    rpc FetchSensorDataSingleSensorStream(stream SingleSensorDataMessage) returns (stream SignalToValuesMap);
}

// Maps the sensor signal id to signal values.
message SignalToValuesMap {
    map<int32, SignalValues> signals = 1;
}

// Maps the sensor signal id to single signal value.
message SignalToValueMap {
    map<int32, SignalValue> signals = 1;
}

// List of signal values guaranteed to be ordered from old to new based on
// timestamp.
message SignalValues {
    repeated SignalValue value = 1;
}

// Single measurement made by a sensor.
message SignalValue {
    // Timestamp the value was ingested on.
    sfixed64 timestamp = 1;
    // Measurement made by the sensor.
    bigdecimal.BigDecimal value = 2;
}

// Contains all data for all sensors.
//
// WARNING: It is not guaranteed that all sensors that exist in the system will
// be returned in this map.
message AllSensorData {
    // Map from sensor uuid to a map of signal id to values.
    map<string, SignalToValuesMap> sensors = 1;
}

// Contains a single timestamp entry of data for all sensors.
//
// NOTE: If a sensor has no data for this entry, it will not be included in the
// map.
message AllSensorDataEntry {
    // Map from sensor uuid to a map of signal id to values.
    map<string, SignalToValuesMap> sensors = 1;
}


message AllSensorDataRequest {
    // Amount of seconds to look back in time and fetch values from.
    uint64 lookback = 1;
}

// Request for signal data from all sensors.
message AllSensorDataMessage {
    oneof start_or_shutdown {
        AllSensorDataRequest request = 1;
        // `nice-grpc-web` has the problem of not closing the websocket
        // connection properly on the client. This is not a problem with
        // `tonic` as when using postman, it closes the connection properly
        // without the need for this signal.
        // NOTE: We have tried (among other things):
        //       -  A properly implemented `DropReceiver` that detects the
        //          connection being closed and stops the thread running the
        //          infinite loop. The receiver however was never dropped.
        //       -  Down/Upgrading the `nice-grpc-web` package version.
        //       -  ...
        google.protobuf.Empty shutdown = 2;
    }
}


message SingleSensorDataRequest {
    // Uuid of the sensor to fetch signal values for.
    string sensor_id = 1;
    // Amount of seconds to look back in time and fetch values from.
    uint64 lookback = 2;
}

// Request for signal data from a single sensor.
message SingleSensorDataMessage {
    oneof start_or_shutdown {
        SingleSensorDataRequest request = 1;
        // `nice-grpc-web` has the problem of not closing the websocket
        // connection properly on the client. This is not a problem with
        // `tonic` as when using postman, it closes the connection properly
        // without the need for this signal.
        // NOTE: We have tried (among other things):
        //       -  A properly implemented `DropReceiver` that detects the
        //          connection being closed and stops the thread running the
        //          infinite loop. The receiver however was never dropped.
        //       -  Down/Upgrading the `nice-grpc-web` package version.
        //       -  ...
        google.protobuf.Empty shutdown = 2;
    }
}
